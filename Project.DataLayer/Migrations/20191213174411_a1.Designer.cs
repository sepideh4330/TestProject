// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.DataLayer.Context;

namespace Project.DataLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191213174411_a1")]
    partial class a1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedDateTimeOn")
                        .IsRequired();

                    b.Property<Guid?>("CreatorIdentityId");

                    b.Property<string>("CreatorIdentityIp")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<short>("GroupCategory");

                    b.Property<short>("GroupStatus");

                    b.Property<short>("GroupType");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(120);

                    b.Property<string>("NameFa")
                        .IsRequired()
                        .HasMaxLength(120);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CreatorIdentityId");

                    b.ToTable("Groups","identity");
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.GroupChangeLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedDateTimeOn")
                        .IsRequired();

                    b.Property<Guid>("CreatorId");

                    b.Property<string>("CreatorIp")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<string>("Current")
                        .IsRequired();

                    b.Property<Guid>("GroupId");

                    b.Property<long>("OrderRow")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Previous")
                        .IsRequired();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupChangeLogs","identity");
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.GroupRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedDateTimeOn")
                        .IsRequired();

                    b.Property<Guid?>("CreatorIdentityId");

                    b.Property<string>("CreatorIdentityIp")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<Guid>("GroupId");

                    b.Property<Guid>("RoleId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CreatorIdentityId");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("GroupRoles","identity");
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NameFa")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<Guid?>("ReferenceRoleId");

                    b.Property<short>("RoleCategory")
                        .HasColumnName("Category");

                    b.Property<short>("RoleType")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("ReferenceRoleId");

                    b.ToTable("Roles","identity");
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims","identity");
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTimeOffset?>("CreatedDateTimeOn")
                        .IsRequired();

                    b.Property<Guid?>("CreatorIdentityId");

                    b.Property<string>("CreatorIdentityIp")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("EmailToken")
                        .HasMaxLength(512);

                    b.Property<DateTimeOffset?>("EmailTokenLifespanDateTimeOn");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("GroupId");

                    b.Property<DateTimeOffset?>("LastActivityDateTimeOn");

                    b.Property<DateTimeOffset?>("LastLoginDateTimeOn");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(120);

                    b.Property<DateTimeOffset?>("LastVisitDateTimeOn");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(450);

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("UserStatus")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("CreatorIdentityId");

                    b.HasIndex("GroupId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users","identity");
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.UserChangeLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedDateTimeOn")
                        .IsRequired();

                    b.Property<Guid>("CreatorId");

                    b.Property<string>("CreatorIp")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<string>("Current")
                        .IsRequired();

                    b.Property<long>("OrderRow")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Previous")
                        .IsRequired();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChangeLogs","identity");
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims","identity");
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.UserGeolocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedDateTimeOn")
                        .IsRequired();

                    b.Property<string>("CreatorIp")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserGeolocations","identity");
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins","identity");
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles","identity");
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.UserToken", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens","identity");
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.UserTokenStorage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("AccessTokenExpiresDateTimeOn");

                    b.Property<string>("AccessTokenHash");

                    b.Property<DateTimeOffset?>("CreatedDateTimeOn")
                        .IsRequired();

                    b.Property<Guid?>("CreatorIdentityId");

                    b.Property<string>("CreatorIdentityIp")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<DateTimeOffset>("RefreshTokenExpiresDateTimeOn");

                    b.Property<string>("RefreshTokenIdHash")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("RefreshTokenIdHashSource")
                        .HasMaxLength(450);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorIdentityId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokenStorages","identity");
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.UserUsedPassword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedDateTimeOn")
                        .IsRequired();

                    b.Property<Guid?>("CreatorIdentityId");

                    b.Property<string>("CreatorIdentityIp")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorIdentityId");

                    b.HasIndex("UserId");

                    b.ToTable("UserUsedPasswords","identity");
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.Group", b =>
                {
                    b.HasOne("Project.DomainClasses.Entities.Identities.User", "CreatorIdentity")
                        .WithMany("Groups")
                        .HasForeignKey("CreatorIdentityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.GroupChangeLog", b =>
                {
                    b.HasOne("Project.DomainClasses.Entities.Identities.User", "Creator")
                        .WithMany("GroupChangeLogs")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Project.DomainClasses.Entities.Identities.Group", "Group")
                        .WithMany("GroupChangeLogs")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.GroupRole", b =>
                {
                    b.HasOne("Project.DomainClasses.Entities.Identities.User", "CreatorIdentity")
                        .WithMany("GroupRoles")
                        .HasForeignKey("CreatorIdentityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Project.DomainClasses.Entities.Identities.Group", "Group")
                        .WithMany("GroupRoles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Project.DomainClasses.Entities.Identities.Role", "Role")
                        .WithMany("GroupRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.Role", b =>
                {
                    b.HasOne("Project.DomainClasses.Entities.Identities.Role", "ReferenceRole")
                        .WithMany("Roles")
                        .HasForeignKey("ReferenceRoleId");
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.RoleClaim", b =>
                {
                    b.HasOne("Project.DomainClasses.Entities.Identities.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.User", b =>
                {
                    b.HasOne("Project.DomainClasses.Entities.Identities.User", "CreatorIdentity")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatorIdentityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Project.DomainClasses.Entities.Identities.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.UserChangeLog", b =>
                {
                    b.HasOne("Project.DomainClasses.Entities.Identities.User", "Creator")
                        .WithMany("CreatedUserChangeLogs")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Project.DomainClasses.Entities.Identities.User", "User")
                        .WithMany("UserChangeLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.UserClaim", b =>
                {
                    b.HasOne("Project.DomainClasses.Entities.Identities.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.UserGeolocation", b =>
                {
                    b.HasOne("Project.DomainClasses.Entities.Identities.User", "User")
                        .WithMany("UserGeolocationUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.UserLogin", b =>
                {
                    b.HasOne("Project.DomainClasses.Entities.Identities.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.UserRole", b =>
                {
                    b.HasOne("Project.DomainClasses.Entities.Identities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Project.DomainClasses.Entities.Identities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.UserToken", b =>
                {
                    b.HasOne("Project.DomainClasses.Entities.Identities.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.UserTokenStorage", b =>
                {
                    b.HasOne("Project.DomainClasses.Entities.Identities.User", "CreatorIdentity")
                        .WithMany("CreatedUserTokenStorages")
                        .HasForeignKey("CreatorIdentityId");

                    b.HasOne("Project.DomainClasses.Entities.Identities.User", "User")
                        .WithMany("UserTokenStorages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project.DomainClasses.Entities.Identities.UserUsedPassword", b =>
                {
                    b.HasOne("Project.DomainClasses.Entities.Identities.User", "CreatorIdentity")
                        .WithMany("CreatedUserUsedPasswords")
                        .HasForeignKey("CreatorIdentityId");

                    b.HasOne("Project.DomainClasses.Entities.Identities.User", "User")
                        .WithMany("UserUsedPasswords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
